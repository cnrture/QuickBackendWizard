package com.github.cnrture.quickbackendwizard.contents

// JWT Security Configuration
fun getJWTSecurityConfigContent(packageName: String): String {
    return buildString {
        appendLine("package $packageName.config")
        appendLine()
        appendLine("import $packageName.security.JWTAuthenticationFilter")
        appendLine("import org.springframework.context.annotation.Bean")
        appendLine("import org.springframework.context.annotation.Configuration")
        appendLine("import org.springframework.http.HttpMethod")
        appendLine("import org.springframework.security.authentication.AuthenticationManager")
        appendLine("import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration")
        appendLine("import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity")
        appendLine("import org.springframework.security.config.annotation.web.builders.HttpSecurity")
        appendLine("import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity")
        appendLine("import org.springframework.security.config.http.SessionCreationPolicy")
        appendLine("import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder")
        appendLine("import org.springframework.security.crypto.password.PasswordEncoder")
        appendLine("import org.springframework.security.web.SecurityFilterChain")
        appendLine("import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter")
        appendLine("import org.springframework.web.cors.CorsConfiguration")
        appendLine("import org.springframework.web.cors.CorsConfigurationSource")
        appendLine("import org.springframework.web.cors.UrlBasedCorsConfigurationSource")
        appendLine()
        appendLine("@Configuration")
        appendLine("@EnableWebSecurity")
        appendLine("@EnableMethodSecurity(prePostEnabled = true)")
        appendLine("class SecurityConfig(")
        appendLine("    private val jwtAuthenticationFilter: JWTAuthenticationFilter")
        appendLine(") {")
        appendLine()
        appendLine("    @Bean")
        appendLine("    fun passwordEncoder(): PasswordEncoder = BCryptPasswordEncoder()")
        appendLine()
        appendLine("    @Bean")
        appendLine("    fun authenticationManager(config: AuthenticationConfiguration): AuthenticationManager {")
        appendLine("        return config.authenticationManager")
        appendLine("    }")
        appendLine()
        appendLine("    @Bean")
        appendLine("    fun corsConfigurationSource(): CorsConfigurationSource {")
        appendLine("        val configuration = CorsConfiguration()")
        appendLine("        configuration.allowedOriginPatterns = listOf(\"*\")")
        appendLine("        configuration.allowedMethods = listOf(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\")")
        appendLine("        configuration.allowedHeaders = listOf(\"*\")")
        appendLine("        configuration.allowCredentials = true")
        appendLine("        configuration.maxAge = 3600L")
        appendLine()
        appendLine("        val source = UrlBasedCorsConfigurationSource()")
        appendLine("        source.registerCorsConfiguration(\"/**\", configuration)")
        appendLine("        return source")
        appendLine("    }")
        appendLine()
        appendLine("    @Bean")
        appendLine("    fun filterChain(http: HttpSecurity): SecurityFilterChain {")
        appendLine("        http")
        appendLine("            .cors { it.configurationSource(corsConfigurationSource()) }")
        appendLine("            .csrf { it.disable() }")
        appendLine("            .sessionManagement { it.sessionCreationPolicy(SessionCreationPolicy.STATELESS) }")
        appendLine("            .authorizeHttpRequests { auth ->")
        appendLine("                auth")
        appendLine("                    // Public endpoints")
        appendLine("                    .requestMatchers(\"/api/v1/auth/**\").permitAll()")
        appendLine("                    .requestMatchers(\"/api/v1/health\").permitAll()")
        appendLine("                    // Swagger endpoints")
        appendLine("                    .requestMatchers(\"/v3/api-docs/**\").permitAll()")
        appendLine("                    .requestMatchers(\"/swagger-ui/**\").permitAll()")
        appendLine("                    .requestMatchers(\"/swagger-ui.html\").permitAll()")
        appendLine("                    // H2 Console (only for development)")
        appendLine("                    .requestMatchers(\"/h2-console/**\").permitAll()")
        appendLine("                    // Admin endpoints")
        appendLine("                    .requestMatchers(HttpMethod.DELETE, \"/api/v1/**\").hasRole(\"ADMIN\")")
        appendLine("                    // All other requests need authentication")
        appendLine("                    .anyRequest().authenticated()")
        appendLine("            }")
        appendLine("            .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter::class.java)")
        appendLine()
        appendLine("        // For H2 Console")
        appendLine("        http.headers { it.frameOptions { frameOptions -> frameOptions.disable() } }")
        appendLine()
        appendLine("        return http.build()")
        appendLine("    }")
        appendLine("}")
    }
}

// JWT Authentication Filter
fun getJWTAuthenticationFilterContent(packageName: String): String {
    return buildString {
        appendLine("package $packageName.security")
        appendLine()
        appendLine("import jakarta.servlet.FilterChain")
        appendLine("import jakarta.servlet.http.HttpServletRequest")
        appendLine("import jakarta.servlet.http.HttpServletResponse")
        appendLine("import org.slf4j.LoggerFactory")
        appendLine("import org.springframework.security.authentication.UsernamePasswordAuthenticationToken")
        appendLine("import org.springframework.security.core.context.SecurityContextHolder")
        appendLine("import org.springframework.security.core.userdetails.UserDetailsService")
        appendLine("import org.springframework.security.web.authentication.WebAuthenticationDetailsSource")
        appendLine("import org.springframework.stereotype.Component")
        appendLine("import org.springframework.web.filter.OncePerRequestFilter")
        appendLine()
        appendLine("@Component")
        appendLine("class JWTAuthenticationFilter(")
        appendLine("    private val jwtUtil: JWTUtil,")
        appendLine("    private val userDetailsService: UserDetailsService")
        appendLine(") : OncePerRequestFilter() {")
        appendLine()
        appendLine("    private val logger = LoggerFactory.getLogger(JWTAuthenticationFilter::class.java)")
        appendLine()
        appendLine("    override fun doFilterInternal(")
        appendLine("        request: HttpServletRequest,")
        appendLine("        response: HttpServletResponse,")
        appendLine("        filterChain: FilterChain")
        appendLine("    ) {")
        appendLine("        try {")
        appendLine("            val jwt = parseJwt(request)")
        appendLine("            if (jwt != null && SecurityContextHolder.getContext().authentication == null) {")
        appendLine("                val username = jwtUtil.extractUsername(jwt)")
        appendLine("                if (username != null) {")
        appendLine("                    val userDetails = userDetailsService.loadUserByUsername(username)")
        appendLine("                    if (jwtUtil.validateToken(jwt, userDetails)) {")
        appendLine("                        val authToken = UsernamePasswordAuthenticationToken(")
        appendLine("                            userDetails, null, userDetails.authorities")
        appendLine("                        )")
        appendLine("                        authToken.details = WebAuthenticationDetailsSource().buildDetails(request)")
        appendLine("                        SecurityContextHolder.getContext().authentication = authToken")
        appendLine("                        logger.debug(\"Set authentication for user: {}\", username)")
        appendLine("                    }")
        appendLine("                }")
        appendLine("            }")
        appendLine("        } catch (e: Exception) {")
        appendLine("            logger.error(\"Cannot set authentication: {}\", e.message)")
        appendLine("        }")
        appendLine()
        appendLine("        filterChain.doFilter(request, response)")
        appendLine("    }")
        appendLine()
        appendLine("    private fun parseJwt(request: HttpServletRequest): String? {")
        appendLine("        val headerAuth = request.getHeader(\"Authorization\")")
        appendLine("        return if (headerAuth != null && headerAuth.startsWith(\"Bearer \")) {")
        appendLine("            headerAuth.substring(7)")
        appendLine("        } else null")
        appendLine("    }")
        appendLine("}")
    }
}

// Authentication Controller
fun getAuthControllerContent(packageName: String): String {
    return buildString {
        appendLine("package $packageName.controller")
        appendLine()
        appendLine("import $packageName.common.ApiResponse")
        appendLine("import $packageName.dto.auth.*")
        appendLine("import $packageName.service.AuthService")
        appendLine("import jakarta.validation.Valid")
        appendLine("import org.springframework.http.HttpStatus")
        appendLine("import org.springframework.http.ResponseEntity")
        appendLine("import org.springframework.web.bind.annotation.*")
        appendLine()
        appendLine("@RestController")
        appendLine("@RequestMapping(\"/auth\")")
        appendLine("class AuthController(private val authService: AuthService) {")
        appendLine()
        appendLine("    @PostMapping(\"/register\")")
        appendLine("    fun register(@Valid @RequestBody request: RegisterRequest): ResponseEntity<ApiResponse<AuthResponse>> {")
        appendLine("        val result = authService.register(request)")
        appendLine("        return if (result.success) {")
        appendLine("            ResponseEntity.status(HttpStatus.CREATED).body(result)")
        appendLine("        } else {")
        appendLine("            ResponseEntity.badRequest().body(result)")
        appendLine("        }")
        appendLine("    }")
        appendLine()
        appendLine("    @PostMapping(\"/login\")")
        appendLine("    fun login(@Valid @RequestBody request: LoginRequest): ResponseEntity<ApiResponse<AuthResponse>> {")
        appendLine("        val result = authService.login(request)")
        appendLine("        return if (result.success) {")
        appendLine("            ResponseEntity.ok(result)")
        appendLine("        } else {")
        appendLine("            ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(result)")
        appendLine("        }")
        appendLine("    }")
        appendLine()
        appendLine("    @PostMapping(\"/refresh\")")
        appendLine("    fun refreshToken(@Valid @RequestBody request: RefreshTokenRequest): ResponseEntity<ApiResponse<AuthResponse>> {")
        appendLine("        val result = authService.refreshToken(request)")
        appendLine("        return if (result.success) {")
        appendLine("            ResponseEntity.ok(result)")
        appendLine("        } else {")
        appendLine("            ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(result)")
        appendLine("        }")
        appendLine("    }")
        appendLine()
        appendLine("    @GetMapping(\"/me\")")
        appendLine("    fun getCurrentUser(): ResponseEntity<ApiResponse<UserResponse>> {")
        appendLine("        val result = authService.getCurrentUser()")
        appendLine("        return if (result.success) {")
        appendLine("            ResponseEntity.ok(result)")
        appendLine("        } else {")
        appendLine("            ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(result)")
        appendLine("        }")
        appendLine("    }")
        appendLine("}")
    }
}