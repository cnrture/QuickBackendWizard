package com.github.cnrture.quickbackendwizard.contents

fun getServiceContent(
    packageName: String,
    entityName: String,
    serviceName: String,
    repositoryName: String,
): String {
    return buildString {
        appendLine("package $packageName.service")
        appendLine()
        appendLine("import $packageName.common.ApiResponse")
        appendLine("import $packageName.entity.$entityName")
        appendLine("import $packageName.repository.$repositoryName")
        appendLine("import org.springframework.stereotype.Service")
        appendLine()
        appendLine("@Service")
        appendLine("class $serviceName(private val repository: $repositoryName) {")
        appendLine()
        appendLine("    fun getAll(): ApiResponse<List<$entityName>> {")
        appendLine("        try {")
        appendLine("            val entities = repository.findAll()")
        appendLine("            return ApiResponse(")
        appendLine("                success = true,")
        appendLine("                message = \"Successfully fetched $entityName list\",")
        appendLine("                data = entities,")
        appendLine("            )")
        appendLine("        } catch (e: Exception) {")
        appendLine("            return ApiResponse(")
        appendLine("                success = false,")
        appendLine("                message = \"Error fetching $entityName list: \${e.message}\",")
        appendLine("                data = emptyList(),")
        appendLine("            )")
        appendLine("        }")
        appendLine("    }")
        appendLine()
        appendLine("    fun getById(id: Long): ApiResponse<$entityName> {")
        appendLine("        try {")
        appendLine("            val entity = repository.findById(id).orElseThrow { ")
        appendLine("                NoSuchElementException(\"$entityName not found with id: \$id\") ")
        appendLine("            }")
        appendLine("            return ApiResponse(")
        appendLine("                success = true,")
        appendLine("                message = \"Successfully fetched $entityName\",")
        appendLine("                data = entity,")
        appendLine("            )")
        appendLine("        } catch (e: NoSuchElementException) {")
        appendLine("            return ApiResponse(")
        appendLine("                success = false,")
        appendLine("                message = e.message ?: \"No such element\",")
        appendLine("                data = null,")
        appendLine("            )")
        appendLine("        } catch (e: Exception) {")
        appendLine("            return ApiResponse(")
        appendLine("                success = false,")
        appendLine("                message = \"Error fetching $entityName: \${e.message}\",")
        appendLine("                data = null,")
        appendLine("            )")
        appendLine("        }")
        appendLine("    }")
        appendLine()
        appendLine("    fun create(entity: $entityName): ApiResponse<$entityName> {")
        appendLine("        return try {")
        appendLine("            val savedEntity = repository.save(entity)")
        appendLine("            ApiResponse(")
        appendLine("                success = true,")
        appendLine("                message = \"$entityName created successfully\",")
        appendLine("                data = savedEntity,")
        appendLine("            )")
        appendLine("        } catch (e: Exception) {")
        appendLine("            ApiResponse(")
        appendLine("                success = false,")
        appendLine("                message = \"Error creating $entityName: \${e.message}\",")
        appendLine("                data = null,")
        appendLine("            )")
        appendLine("        }")
        appendLine("    }")
        appendLine()
        appendLine("    fun update(id: Long, entity: $entityName): ApiResponse<$entityName> {")
        appendLine("        return try {")
        appendLine("            if (!repository.existsById(id)) {")
        appendLine("                return ApiResponse(")
        appendLine("                    success = false,")
        appendLine("                    message = \"$entityName not found with id: \$id\",")
        appendLine("                    data = null,")
        appendLine("                )")
        appendLine("            }")
        appendLine("            val updatedEntity = repository.save(entity.copy(id = id))")
        appendLine("            ApiResponse(")
        appendLine("                success = true,")
        appendLine("                message = \"$entityName updated successfully\",")
        appendLine("                data = updatedEntity,")
        appendLine("            )")
        appendLine("        } catch (e: Exception) {")
        appendLine("            ApiResponse(")
        appendLine("                success = false,")
        appendLine("                message = \"Error updating $entityName: \${e.message}\",")
        appendLine("                data = null,")
        appendLine("            )")
        appendLine("        }")
        appendLine("    }")
        appendLine()
        appendLine("    fun deleteById(id: Long): ApiResponse<Boolean> {")
        appendLine("        return try {")
        appendLine("            if (!repository.existsById(id)) {")
        appendLine("                return ApiResponse(")
        appendLine("                    success = false,")
        appendLine("                    message = \"$entityName not found with id: \$id\",")
        appendLine("                    data = false,")
        appendLine("                )")
        appendLine("            }")
        appendLine("            repository.deleteById(id)")
        appendLine("            ApiResponse(")
        appendLine("                success = true,")
        appendLine("                message = \"$entityName deleted successfully\",")
        appendLine("                data = true,")
        appendLine("            )")
        appendLine("        } catch (e: Exception) {")
        appendLine("            ApiResponse(")
        appendLine("                success = false,")
        appendLine("                message = \"Error deleting $entityName: \${e.message}\",")
        appendLine("                data = false,")
        appendLine("            )")
        appendLine("        }")
        appendLine("    }")
        appendLine("}")
    }
}