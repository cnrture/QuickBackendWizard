package com.github.cnrture.quickbackendwizard.contents

fun getGlobalExceptionHandlerContent(packageName: String): String {
    return buildString {
        appendLine("package $packageName.config")
        appendLine()
        appendLine("import $packageName.common.ApiResponse")
        appendLine("import jakarta.validation.ConstraintViolationException")
        appendLine("import org.slf4j.LoggerFactory")
        appendLine("import org.springframework.http.HttpStatus")
        appendLine("import org.springframework.http.ResponseEntity")
        appendLine("import org.springframework.web.bind.MethodArgumentNotValidException")
        appendLine("import org.springframework.web.bind.annotation.ControllerAdvice")
        appendLine("import org.springframework.web.bind.annotation.ExceptionHandler")
        appendLine("import org.springframework.web.context.request.WebRequest")
        appendLine()
        appendLine("@ControllerAdvice")
        appendLine("class GlobalExceptionHandler {")
        appendLine()
        appendLine("    private val logger = LoggerFactory.getLogger(GlobalExceptionHandler::class.java)")
        appendLine()
        appendLine("    @ExceptionHandler(MethodArgumentNotValidException::class)")
        appendLine("    fun handleValidationErrors(")
        appendLine("        ex: MethodArgumentNotValidException,")
        appendLine("        request: WebRequest")
        appendLine("    ): ResponseEntity<ApiResponse<Map<String, String>>> {")
        appendLine("        logger.warn(\"Validation error occurred: \${ex.message}\")")
        appendLine()
        appendLine("        val errors = mutableMapOf<String, String>()")
        appendLine("        ex.bindingResult.fieldErrors.forEach { error ->")
        appendLine("            errors[error.field] = error.defaultMessage ?: \"Invalid value\"")
        appendLine("        }")
        appendLine()
        appendLine("        val response = ApiResponse(")
        appendLine("            success = false,")
        appendLine("            message = \"Validation failed\",")
        appendLine("            data = errors")
        appendLine("        )")
        appendLine()
        appendLine("        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response)")
        appendLine("    }")
        appendLine()
        appendLine("    @ExceptionHandler(ConstraintViolationException::class)")
        appendLine("    fun handleConstraintViolation(")
        appendLine("        ex: ConstraintViolationException,")
        appendLine("        request: WebRequest")
        appendLine("    ): ResponseEntity<ApiResponse<Map<String, String>>> {")
        appendLine("        logger.warn(\"Constraint violation occurred: \${ex.message}\")")
        appendLine()
        appendLine("        val errors = mutableMapOf<String, String>()")
        appendLine("        ex.constraintViolations.forEach { violation ->")
        appendLine("            val propertyPath = violation.propertyPath.toString()")
        appendLine("            val message = violation.message")
        appendLine("            errors[propertyPath] = message")
        appendLine("        }")
        appendLine()
        appendLine("        val response = ApiResponse(")
        appendLine("            success = false,")
        appendLine("            message = \"Validation failed\",")
        appendLine("            data = errors")
        appendLine("        )")
        appendLine()
        appendLine("        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response)")
        appendLine("    }")
        appendLine()
        appendLine("    @ExceptionHandler(IllegalArgumentException::class)")
        appendLine("    fun handleIllegalArgument(")
        appendLine("        ex: IllegalArgumentException,")
        appendLine("        request: WebRequest")
        appendLine("    ): ResponseEntity<ApiResponse<Nothing>> {")
        appendLine("        logger.warn(\"Illegal argument: \${ex.message}\")")
        appendLine()
        appendLine("        val response = ApiResponse<Nothing>(")
        appendLine("            success = false,")
        appendLine("            message = ex.message ?: \"Invalid request\",")
        appendLine("            data = null")
        appendLine("        )")
        appendLine()
        appendLine("        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response)")
        appendLine("    }")
        appendLine()
        appendLine("    @ExceptionHandler(Exception::class)")
        appendLine("    fun handleGenericException(")
        appendLine("        ex: Exception,")
        appendLine("        request: WebRequest")
        appendLine("    ): ResponseEntity<ApiResponse<Nothing>> {")
        appendLine("        logger.error(\"Unexpected error occurred: \${ex.message}\", ex)")
        appendLine()
        appendLine("        val response = ApiResponse<Nothing>(")
        appendLine("            success = false,")
        appendLine("            message = \"An unexpected error occurred\",")
        appendLine("            data = null")
        appendLine("        )")
        appendLine()
        appendLine("        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response)")
        appendLine("    }")
        appendLine("}")
    }
}