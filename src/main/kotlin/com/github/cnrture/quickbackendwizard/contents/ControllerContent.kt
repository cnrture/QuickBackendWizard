package com.github.cnrture.quickbackendwizard.contents

fun getControllerContent(
    packageName: String,
    entityName: String,
    controllerName: String,
    serviceName: String,
    endpoint: String,
    isSwaggerEnabled: Boolean,
): String {
    return buildString {
        appendLine("package $packageName.controller")
        appendLine()
        appendLine("import $packageName.common.ApiResponse")
        appendLine("import $packageName.entity.$entityName")
        appendLine("import $packageName.service.$serviceName")
        if (isSwaggerEnabled) {
            appendLine("import io.swagger.v3.oas.annotations.tags.Tag")
            appendLine("import io.swagger.v3.oas.annotations.Operation")
            appendLine("import io.swagger.v3.oas.annotations.media.Content")
            appendLine("import io.swagger.v3.oas.annotations.media.Schema")
            appendLine("import io.swagger.v3.oas.annotations.responses.ApiResponses")
            appendLine("import io.swagger.v3.oas.annotations.responses.ApiResponse as SwaggerApiResponse")
        }
        appendLine("import jakarta.validation.Valid")
        appendLine("import jakarta.validation.constraints.Min")
        appendLine("import org.springframework.http.HttpStatus")
        appendLine("import org.springframework.http.ResponseEntity")
        appendLine("import org.springframework.validation.annotation.Validated")
        appendLine("import org.springframework.web.bind.annotation.*")
        appendLine()
        appendLine("@RestController")
        appendLine("@RequestMapping(\"/$endpoint\")")
        appendLine("@Validated")
        if (isSwaggerEnabled) {
            appendLine("@Tag(name = \"$entityName Controller\", description = \"CRUD operations for $entityName\")")
        }
        appendLine("class $controllerName(private val service: $serviceName) {")
        appendLine()
        if (isSwaggerEnabled) {
            appendLine("    @Operation(summary = \"Get all $entityName\", description = \"Retrieve a list of all $entityName\")")
            appendLine("    @ApiResponses(")
            appendLine("        value = [")
            appendLine("            SwaggerApiResponse(")
            appendLine("                responseCode = \"200\", description = \"Successfully retrieved\",")
            appendLine("                content = [Content(schema = Schema(implementation = ApiResponse::class))],")
            appendLine("            ),")
            appendLine("            SwaggerApiResponse(responseCode = \"204\", description = \"No content\"),")
            appendLine("        ]")
            appendLine("    )")
        }
        appendLine("    @GetMapping")
        appendLine("    fun getAll(): ResponseEntity<ApiResponse<List<$entityName>>> {")
        appendLine("        val entities = service.getAll()")
        appendLine("        return if (entities.success) {")
        appendLine("            if (entities.data.isNullOrEmpty()) {")
        appendLine("                ResponseEntity.noContent().build()")
        appendLine("            } else {")
        appendLine("                ResponseEntity.ok(entities)")
        appendLine("            }")
        appendLine("        } else {")
        appendLine("            ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(entities)")
        appendLine("        }")
        appendLine("    }")
        appendLine()
        if (isSwaggerEnabled) {
            appendLine("    @Operation(summary = \"Get $entityName by ID\", description = \"Retrieve a single $entityName by its ID\")")
            appendLine("    @ApiResponses(")
            appendLine("        value = [")
            appendLine("            SwaggerApiResponse(")
            appendLine("                responseCode = \"200\", description = \"Successfully retrieved\",")
            appendLine("                content = [Content(schema = Schema(implementation = ApiResponse::class))],")
            appendLine("            ),")
            appendLine("            SwaggerApiResponse(responseCode = \"404\", description = \"$entityName not found\"),")
            appendLine("        ]")
            appendLine("    )")
        }
        appendLine("    @GetMapping(\"/{id}\")")
        appendLine("    fun getById(@PathVariable @Min(1) id: Long): ResponseEntity<ApiResponse<$entityName>> {")
        appendLine("        val entity = service.getById(id)")
        appendLine("        return if (entity.success) {")
        appendLine("            ResponseEntity.ok(entity)")
        appendLine("        } else {")
        appendLine("            ResponseEntity.status(HttpStatus.NOT_FOUND).body(entity)")
        appendLine("        }")
        appendLine("    }")
        appendLine()
        if (isSwaggerEnabled) {
            appendLine("    @Operation(summary = \"Create new $entityName\", description = \"Create a new $entityName\")")
            appendLine("    @ApiResponses(")
            appendLine("        value = [")
            appendLine("            SwaggerApiResponse(")
            appendLine("                responseCode = \"201\", description = \"Successfully created\",")
            appendLine("                content = [Content(schema = Schema(implementation = ApiResponse::class))],")
            appendLine("            ),")
            appendLine("            SwaggerApiResponse(responseCode = \"400\", description = \"Bad request\"),")
            appendLine("        ]")
            appendLine("    )")
        }
        appendLine("    @PostMapping")
        appendLine("    fun create(@Valid @RequestBody entity: $entityName): ResponseEntity<ApiResponse<$entityName>> {")
        appendLine("        val createdEntity = service.create(entity)")
        appendLine("        return if (createdEntity.success) {")
        appendLine("            ResponseEntity.status(HttpStatus.CREATED).body(createdEntity)")
        appendLine("        } else {")
        appendLine("            ResponseEntity.status(HttpStatus.BAD_REQUEST).body(createdEntity)")
        appendLine("        }")
        appendLine("    }")
        appendLine()
        if (isSwaggerEnabled) {
            appendLine("    @Operation(summary = \"Update existing $entityName\", description = \"Update an existing $entityName by its ID\")")
            appendLine("    @ApiResponses(")
            appendLine("        value = [")
            appendLine("            SwaggerApiResponse(")
            appendLine("                responseCode = \"200\", description = \"Successfully updated\",")
            appendLine("                content = [Content(schema = Schema(implementation = ApiResponse::class))],")
            appendLine("            ),")
            appendLine("            SwaggerApiResponse(responseCode = \"404\", description = \"$entityName not found\"),")
            appendLine("        ]")
            appendLine("    )")
        }
        appendLine("    @PutMapping(\"/{id}\")")
        appendLine("    fun update(@PathVariable @Min(1) id: Long, @Valid @RequestBody entity: $entityName): ResponseEntity<ApiResponse<$entityName>> {")
        appendLine("        val updatedEntity = service.update(id, entity)")
        appendLine("        return if (updatedEntity.success) {")
        appendLine("            ResponseEntity.ok(updatedEntity)")
        appendLine("        } else {")
        appendLine("            ResponseEntity.status(HttpStatus.NOT_FOUND).body(updatedEntity)")
        appendLine("        }")
        appendLine("    }")
        appendLine()
        if (isSwaggerEnabled) {
            appendLine("    @Operation(summary = \"Delete $entityName by ID\", description = \"Delete an existing $entityName by its ID\")")
            appendLine("    @ApiResponses(")
            appendLine("        value = [")
            appendLine("            SwaggerApiResponse(")
            appendLine("                responseCode = \"204\", description = \"Successfully deleted\",")
            appendLine("                content = [Content(schema = Schema(implementation = ApiResponse::class))],")
            appendLine("            ),")
            appendLine("            SwaggerApiResponse(responseCode = \"404\", description = \"$entityName not found\"),")
            appendLine("        ]")
            appendLine("    )")
        }
        appendLine("    @DeleteMapping(\"/{id}\")")
        appendLine("    fun deleteById(@PathVariable @Min(1) id: Long): ResponseEntity<ApiResponse<Unit>> {")
        appendLine("        val deleted = service.deleteById(id)")
        appendLine("        return if (deleted.success) {")
        appendLine("            ResponseEntity.noContent().build()")
        appendLine("        } else {")
        appendLine("            ResponseEntity.status(HttpStatus.NOT_FOUND).body(deleted)")
        appendLine("        }")
        appendLine("    }")
        appendLine("}")
    }
}