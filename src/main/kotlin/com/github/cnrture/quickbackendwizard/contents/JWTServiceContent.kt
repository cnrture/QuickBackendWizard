package com.github.cnrture.quickbackendwizard.contents

// Authentication Service
fun getAuthServiceContent(packageName: String): String {
    return buildString {
        appendLine("package $packageName.service")
        appendLine()
        appendLine("import $packageName.common.ApiResponse")
        appendLine("import $packageName.dto.auth.*")
        appendLine("import $packageName.entity.Role")
        appendLine("import $packageName.entity.User")
        appendLine("import $packageName.repository.UserRepository")
        appendLine("import $packageName.security.JWTUtil")
        appendLine("import org.slf4j.LoggerFactory")
        appendLine("import org.springframework.security.authentication.AuthenticationManager")
        appendLine("import org.springframework.security.authentication.BadCredentialsException")
        appendLine("import org.springframework.security.authentication.UsernamePasswordAuthenticationToken")
        appendLine("import org.springframework.security.core.context.SecurityContextHolder")
        appendLine("import org.springframework.security.crypto.password.PasswordEncoder")
        appendLine("import org.springframework.stereotype.Service")
        appendLine("import org.springframework.transaction.annotation.Transactional")
        appendLine()
        appendLine("@Service")
        appendLine("@Transactional(readOnly = true)")
        appendLine("class AuthService(")
        appendLine("    private val userRepository: UserRepository,")
        appendLine("    private val passwordEncoder: PasswordEncoder,")
        appendLine("    private val jwtUtil: JWTUtil,")
        appendLine("    private val authenticationManager: AuthenticationManager")
        appendLine(") {")
        appendLine()
        appendLine("    private val logger = LoggerFactory.getLogger(AuthService::class.java)")
        appendLine()
        appendLine("    @Transactional")
        appendLine("    fun register(request: RegisterRequest): ApiResponse<AuthResponse> {")
        appendLine("        logger.debug(\"Attempting to register user: {}\", request.username)")
        appendLine()
        appendLine("        return try {")
        appendLine("            // Check if user already exists")
        appendLine("            if (userRepository.existsByUsername(request.username)) {")
        appendLine("                logger.warn(\"Registration failed: Username {} already exists\", request.username)")
        appendLine("                return ApiResponse(")
        appendLine("                    success = false,")
        appendLine("                    message = \"Username already exists\",")
        appendLine("                    data = null")
        appendLine("                )")
        appendLine("            }")
        appendLine()
        appendLine("            if (userRepository.existsByEmail(request.email)) {")
        appendLine("                logger.warn(\"Registration failed: Email {} already exists\", request.email)")
        appendLine("                return ApiResponse(")
        appendLine("                    success = false,")
        appendLine("                    message = \"Email already exists\",")
        appendLine("                    data = null")
        appendLine("                )")
        appendLine("            }")
        appendLine()
        appendLine("            // Create new user")
        appendLine("            val user = User(")
        appendLine("                username = request.username,")
        appendLine("                email = request.email,")
        appendLine("                password = passwordEncoder.encode(request.password),")
        appendLine("                role = Role.USER")
        appendLine("            )")
        appendLine()
        appendLine("            val savedUser = userRepository.save(user)")
        appendLine("            logger.info(\"User registered successfully: {}\", savedUser.username)")
        appendLine()
        appendLine("            // Generate tokens")
        appendLine("            val accessToken = jwtUtil.generateToken(savedUser)")
        appendLine("            val refreshToken = jwtUtil.generateRefreshToken(savedUser)")
        appendLine()
        appendLine("            val authResponse = AuthResponse(")
        appendLine("                accessToken = accessToken,")
        appendLine("                refreshToken = refreshToken,")
        appendLine("                expiresIn = 86400000 // 24 hours in milliseconds")
        appendLine("            )")
        appendLine()
        appendLine("            ApiResponse(")
        appendLine("                success = true,")
        appendLine("                message = \"User registered successfully\",")
        appendLine("                data = authResponse")
        appendLine("            )")
        appendLine("        } catch (e: Exception) {")
        appendLine("            logger.error(\"Registration failed for user {}: {}\", request.username, e.message, e)")
        appendLine("            ApiResponse(")
        appendLine("                success = false,")
        appendLine("                message = \"Registration failed: \${e.message}\",")
        appendLine("                data = null")
        appendLine("            )")
        appendLine("        }")
        appendLine("    }")
        appendLine()
        appendLine("    fun login(request: LoginRequest): ApiResponse<AuthResponse> {")
        appendLine("        logger.debug(\"Attempting to login user: {}\", request.username)")
        appendLine()
        appendLine("        return try {")
        appendLine("            // Authenticate user")
        appendLine("            val authToken = UsernamePasswordAuthenticationToken(request.username, request.password)")
        appendLine("            val authentication = authenticationManager.authenticate(authToken)")
        appendLine()
        appendLine("            val user = authentication.principal as User")
        appendLine("            logger.info(\"User logged in successfully: {}\", user.username)")
        appendLine()
        appendLine("            // Generate tokens")
        appendLine("            val accessToken = jwtUtil.generateToken(user)")
        appendLine("            val refreshToken = jwtUtil.generateRefreshToken(user)")
        appendLine()
        appendLine("            val authResponse = AuthResponse(")
        appendLine("                accessToken = accessToken,")
        appendLine("                refreshToken = refreshToken,")
        appendLine("                expiresIn = 86400000 // 24 hours in milliseconds")
        appendLine("            )")
        appendLine()
        appendLine("            ApiResponse(")
        appendLine("                success = true,")
        appendLine("                message = \"Login successful\",")
        appendLine("                data = authResponse")
        appendLine("            )")
        appendLine("        } catch (e: BadCredentialsException) {")
        appendLine("            logger.warn(\"Login failed for user {}: Invalid credentials\", request.username)")
        appendLine("            ApiResponse(")
        appendLine("                success = false,")
        appendLine("                message = \"Invalid username or password\",")
        appendLine("                data = null")
        appendLine("            )")
        appendLine("        } catch (e: Exception) {")
        appendLine("            logger.error(\"Login failed for user {}: {}\", request.username, e.message, e)")
        appendLine("            ApiResponse(")
        appendLine("                success = false,")
        appendLine("                message = \"Login failed: \${e.message}\",")
        appendLine("                data = null")
        appendLine("            )")
        appendLine("        }")
        appendLine("    }")
        appendLine()
        appendLine("    fun refreshToken(request: RefreshTokenRequest): ApiResponse<AuthResponse> {")
        appendLine("        logger.debug(\"Attempting to refresh token\")")
        appendLine()
        appendLine("        return try {")
        appendLine("            val refreshToken = request.refreshToken")
        appendLine()
        appendLine("            // Validate refresh token")
        appendLine("            if (!jwtUtil.isRefreshToken(refreshToken)) {")
        appendLine("                logger.warn(\"Invalid refresh token provided\")")
        appendLine("                return ApiResponse(")
        appendLine("                    success = false,")
        appendLine("                    message = \"Invalid refresh token\",")
        appendLine("                    data = null")
        appendLine("                )")
        appendLine("            }")
        appendLine()
        appendLine("            val username = jwtUtil.extractUsername(refreshToken)")
        appendLine("            if (username == null || jwtUtil.isTokenExpired(refreshToken)) {")
        appendLine("                logger.warn(\"Refresh token expired or invalid\")")
        appendLine("                return ApiResponse(")
        appendLine("                    success = false,")
        appendLine("                    message = \"Refresh token expired\",")
        appendLine("                    data = null")
        appendLine("                )")
        appendLine("            }")
        appendLine()
        appendLine("            val user = userRepository.findByUsername(username)")
        appendLine("            if (user == null) {")
        appendLine("                logger.warn(\"User not found for refresh token: {}\", username)")
        appendLine("                return ApiResponse(")
        appendLine("                    success = false,")
        appendLine("                    message = \"User not found\",")
        appendLine("                    data = null")
        appendLine("                )")
        appendLine("            }")
        appendLine()
        appendLine("            // Generate new tokens")
        appendLine("            val newAccessToken = jwtUtil.generateToken(user)")
        appendLine("            val newRefreshToken = jwtUtil.generateRefreshToken(user)")
        appendLine()
        appendLine("            logger.info(\"Token refreshed successfully for user: {}\", user.username)")
        appendLine()
        appendLine("            val authResponse = AuthResponse(")
        appendLine("                accessToken = newAccessToken,")
        appendLine("                refreshToken = newRefreshToken,")
        appendLine("                expiresIn = 86400000")
        appendLine("            )")
        appendLine()
        appendLine("            ApiResponse(")
        appendLine("                success = true,")
        appendLine("                message = \"Token refreshed successfully\",")
        appendLine("                data = authResponse")
        appendLine("            )")
        appendLine("        } catch (e: Exception) {")
        appendLine("            logger.error(\"Token refresh failed: {}\", e.message, e)")
        appendLine("            ApiResponse(")
        appendLine("                success = false,")
        appendLine("                message = \"Token refresh failed: \${e.message}\",")
        appendLine("                data = null")
        appendLine("            )")
        appendLine("        }")
        appendLine("    }")
        appendLine()
        appendLine("    fun getCurrentUser(): ApiResponse<UserResponse> {")
        appendLine("        return try {")
        appendLine("            val authentication = SecurityContextHolder.getContext().authentication")
        appendLine("            val user = authentication.principal as User")
        appendLine()
        appendLine("            val userResponse = UserResponse(")
        appendLine("                id = user.id!!,")
        appendLine("                username = user.username,")
        appendLine("                email = user.email,")
        appendLine("                role = user.role.name")
        appendLine("            )")
        appendLine()
        appendLine("            ApiResponse(")
        appendLine("                success = true,")
        appendLine("                message = \"User retrieved successfully\",")
        appendLine("                data = userResponse")
        appendLine("            )")
        appendLine("        } catch (e: Exception) {")
        appendLine("            logger.error(\"Failed to get current user: {}\", e.message, e)")
        appendLine("            ApiResponse(")
        appendLine("                success = false,")
        appendLine("                message = \"Failed to get current user\",")
        appendLine("                data = null")
        appendLine("            )")
        appendLine("        }")
        appendLine("    }")
        appendLine("}")
    }
}

// User Repository
fun getUserRepositoryContent(packageName: String): String {
    return buildString {
        appendLine("package $packageName.repository")
        appendLine()
        appendLine("import $packageName.entity.User")
        appendLine("import org.springframework.data.jpa.repository.JpaRepository")
        appendLine("import org.springframework.stereotype.Repository")
        appendLine()
        appendLine("@Repository")
        appendLine("interface UserRepository : JpaRepository<User, Long> {")
        appendLine("    fun findByUsername(username: String): User?")
        appendLine("    fun findByEmail(email: String): User?")
        appendLine("    fun existsByUsername(username: String): Boolean")
        appendLine("    fun existsByEmail(email: String): Boolean")
        appendLine("}")
    }
}

// Custom User Details Service
fun getCustomUserDetailsServiceContent(packageName: String): String {
    return buildString {
        appendLine("package $packageName.service")
        appendLine()
        appendLine("import $packageName.repository.UserRepository")
        appendLine("import org.springframework.security.core.userdetails.UserDetails")
        appendLine("import org.springframework.security.core.userdetails.UserDetailsService")
        appendLine("import org.springframework.security.core.userdetails.UsernameNotFoundException")
        appendLine("import org.springframework.stereotype.Service")
        appendLine()
        appendLine("@Service")
        appendLine("class CustomUserDetailsService(")
        appendLine("    private val userRepository: UserRepository")
        appendLine(") : UserDetailsService {")
        appendLine()
        appendLine("    override fun loadUserByUsername(username: String): UserDetails {")
        appendLine("        return userRepository.findByUsername(username)")
        appendLine("            ?: throw UsernameNotFoundException(\"User not found with username: \$username\")")
        appendLine("    }")
        appendLine("}")
    }
}